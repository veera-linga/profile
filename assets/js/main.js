/**
* Template Name: iPortfolio - v3.10.0
* Template URL: https://bootstrapmade.com/iportfolio-bootstrap-portfolio-websites-template/
* Author: BootstrapMade.com
* License: https://bootstrapmade.com/license/
*/
(function() {
Â  "use strict";

Â  /**
Â  Â * Easy selector helper function
Â  Â */
Â  const select = (el, all = false) => {
Â  Â  el = el.trim()
Â  Â  if (all) {
Â  Â  Â  return [...document.querySelectorAll(el)]
Â  Â  } else {
Â  Â  Â  return document.querySelector(el)
Â  Â  }
Â  }

Â  /**
Â  Â * Easy event listener function
Â  Â */
Â  const on = (type, el, listener, all = false) => {
Â  Â  let selectEl = select(el, all)
Â  Â  if (selectEl) {
Â  Â  Â  if (all) {
Â  Â  Â  Â  selectEl.forEach(e => e.addEventListener(type, listener))
Â  Â  Â  } else {
Â  Â  Â  Â  selectEl.addEventListener(type, listener)
Â  Â  Â  }
Â  Â  }
Â  }

Â  /**
Â  Â * Easy on scroll event listenerÂ 
Â  Â */
Â  const onscroll = (el, listener) => {
Â  Â  el.addEventListener('scroll', listener)
Â  }

Â  /**
Â  Â * Navbar links active state on scroll
Â  Â */
Â  let navbarlinks = select('#navbar .scrollto', true)
Â  const navbarlinksActive = () => {
Â  Â  let position = window.scrollY + 200
Â  Â  navbarlinks.forEach(navbarlink => {
Â  Â  Â  if (!navbarlink.hash) return
Â  Â  Â  let section = select(navbarlink.hash)
Â  Â  Â  if (!section) return
Â  Â  Â  if (position >= section.offsetTop && position <= (section.offsetTop + section.offsetHeight)) {
Â  Â  Â  Â  navbarlink.classList.add('active')
Â  Â  Â  } else {
Â  Â  Â  Â  navbarlink.classList.remove('active')
Â  Â  Â  }
Â  Â  })
Â  }
Â  window.addEventListener('load', navbarlinksActive)
Â  onscroll(document, navbarlinksActive)

Â  /**
Â  Â * Scrolls to an element with header offset
Â  Â */
Â  const scrollto = (el) => {
Â  Â  let elementPos = select(el).offsetTop
Â  Â  window.scrollTo({
Â  Â  Â  top: elementPos,
Â  Â  Â  behavior: 'smooth'
Â  Â  })
Â  }

Â  /**
Â  Â * Back to top button
Â  Â */
Â  let backtotop = select('.back-to-top')
Â  if (backtotop) {
Â  Â  const toggleBacktotop = () => {
Â  Â  Â  if (window.scrollY > 100) {
Â  Â  Â  Â  backtotop.classList.add('active')
Â  Â  Â  } else {
Â  Â  Â  Â  backtotop.classList.remove('active')
Â  Â  Â  }
Â  Â  }
Â  Â  window.addEventListener('load', toggleBacktotop)
Â  Â  onscroll(document, toggleBacktotop)
Â  }

Â  /**
Â  Â * Mobile nav toggle
Â  Â */
Â  on('click', '.mobile-nav-toggle', function(e) {
Â  Â  select('body').classList.toggle('mobile-nav-active')
Â  Â  this.classList.toggle('bi-list')
Â  Â  this.classList.toggle('bi-x')
Â  })

Â  /**
Â  Â * Scrool with ofset on links with a class name .scrollto
Â  Â */
Â  on('click', '.scrollto', function(e) {
Â  Â  if (select(this.hash)) {
Â  Â  Â  e.preventDefault()

Â  Â  Â  let body = select('body')
Â  Â  Â  if (body.classList.contains('mobile-nav-active')) {
Â  Â  Â  Â  body.classList.remove('mobile-nav-active')
Â  Â  Â  Â  let navbarToggle = select('.mobile-nav-toggle')
Â  Â  Â  Â  navbarToggle.classList.toggle('bi-list')
Â  Â  Â  Â  navbarToggle.classList.toggle('bi-x')
Â  Â  Â  }
Â  Â  Â  scrollto(this.hash)
Â  Â  }
Â  }, true)

Â  /**
Â  Â * Scroll with ofset on page load with hash links in the url
Â  Â */
Â  window.addEventListener('load', () => {
Â  Â  if (window.location.hash) {
Â  Â  Â  if (select(window.location.hash)) {
Â  Â  Â  Â  scrollto(window.location.hash)
Â  Â  Â  }
Â  Â  }
Â  });

Â  /**
Â  Â * Hero type effect
Â  Â */
Â  const typed = select('.typed')
Â  if (typed) {
Â  Â  let typed_strings = typed.getAttribute('data-typed-items')
Â  Â  typed_strings = typed_strings.split(',')
Â  Â  new Typed('.typed', {
Â  Â  Â  strings: typed_strings,
Â  Â  Â  loop: true,
Â  Â  Â  typeSpeed: 100,
Â  Â  Â  backSpeed: 50,
Â  Â  Â  backDelay: 2000
Â  Â  });
Â  }

Â  /**
Â  Â * Skills animation
Â  Â */
Â  let skilsContent = select('.skills-content');
Â  if (skilsContent) {
Â  Â  new Waypoint({
Â  Â  Â  element: skilsContent,
Â  Â  Â  offset: '80%',
Â  Â  Â  handler: function(direction) {
Â  Â  Â  Â  let progress = select('.progress .progress-bar', true);
Â  Â  Â  Â  progress.forEach((el) => {
Â  Â  Â  Â  Â  el.style.width = el.getAttribute('aria-valuenow') + '%'
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  })
Â  }

Â  /**
Â  Â * Porfolio isotope and filter
Â  Â */
Â  window.addEventListener('load', () => {
Â  Â  let portfolioContainer = select('.portfolio-container');
Â  Â  if (portfolioContainer) {
Â  Â  Â  let portfolioIsotope = new Isotope(portfolioContainer, {
Â  Â  Â  Â  itemSelector: '.portfolio-item'
Â  Â  Â  });

Â  Â  Â  let portfolioFilters = select('#portfolio-flters li', true);

Â  Â  Â  on('click', '#portfolio-flters li', function(e) {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  portfolioFilters.forEach(function(el) {
Â  Â  Â  Â  Â  el.classList.remove('filter-active');
Â  Â  Â  Â  });
Â  Â  Â  Â  this.classList.add('filter-active');

Â  Â  Â  Â  portfolioIsotope.arrange({
Â  Â  Â  Â  Â  filter: this.getAttribute('data-filter')
Â  Â  Â  Â  });
Â  Â  Â  Â  portfolioIsotope.on('arrangeComplete', function() {
Â  Â  Â  Â  Â  AOS.refresh()
Â  Â  Â  Â  });
Â  Â  Â  }, true);
Â  Â  }

Â  });

Â  /**
Â  Â * Initiate portfolio lightboxÂ 
Â  Â */
Â  const portfolioLightbox = GLightbox({
Â  Â  selector: '.portfolio-lightbox'
Â  });

Â  /**
Â  Â * Portfolio details slider
Â  Â */
Â  new Swiper('.portfolio-details-slider', {
Â  Â  speed: 400,
Â  Â  loop: true,
Â  Â  autoplay: {
Â  Â  Â  delay: 5000,
Â  Â  Â  disableOnInteraction: false
Â  Â  },
Â  Â  pagination: {
Â  Â  Â  el: '.swiper-pagination',
Â  Â  Â  type: 'bullets',
Â  Â  Â  clickable: true
Â  Â  }
Â  });

Â  /**
Â  Â * Testimonials slider
Â  Â */
Â  new Swiper('.testimonials-slider', {
Â  Â  speed: 600,
Â  Â  loop: true,
Â  Â  autoplay: {
Â  Â  Â  delay: 5000,
Â  Â  Â  disableOnInteraction: false
Â  Â  },
Â  Â  slidesPerView: 'auto',
Â  Â  pagination: {
Â  Â  Â  el: '.swiper-pagination',
Â  Â  Â  type: 'bullets',
Â  Â  Â  clickable: true
Â  Â  },
Â  Â  breakpoints: {
Â  Â  Â  320: {
Â  Â  Â  Â  slidesPerView: 1,
Â  Â  Â  Â  spaceBetween: 20
Â  Â  Â  },

Â  Â  Â  1200: {
Â  Â  Â  Â  slidesPerView: 3,
Â  Â  Â  Â  spaceBetween: 20
Â  Â  Â  }
Â  Â  }
Â  });

Â  /**
Â  Â * Animation on scroll
Â  Â */
Â  window.addEventListener('load', () => {
Â  Â  AOS.init({
Â  Â  Â  duration: 1000,
Â  Â  Â  easing: 'ease-in-out',
Â  Â  Â  once: true,
Â  Â  Â  mirror: false
Â  Â  })
Â  });

Â  /**
Â  Â * Initiate Pure CounterÂ 
Â  Â */
Â  new PureCounter();

/* === START OF NEW CODE FOR PHONE NUMBER IN PRINT === */

Â  /**
Â  Â * Dynamically adds and removes phone number for printing
Â  Â */
Â  const phoneNumber = '+91 86887 36108'; // ðŸ‘ˆ **Replace this with your actual phone number**

Â  // Function to add the phone number to the print header
Â  const addPhoneNumberForPrint = () => {
Â  Â  const contactSection = select('#contact .section-title');
Â  Â  if (contactSection) {
Â  Â  Â  const phoneElement = document.createElement('p');
Â  Â  Â  phoneElement.textContent = `Call me at ${phoneNumber}.`;
Â  Â  Â  phoneElement.classList.add('print-phone-number'); // Class for CSS styling
Â  Â  Â  contactSection.appendChild(phoneElement);
Â  Â  }
Â  };

Â  // Function to remove the phone number after printing
Â  const removePhoneNumberAfterPrint = () => {
Â  Â  const phoneElement = select('.print-phone-number');
Â  Â  if (phoneElement) {
Â  Â  Â  phoneElement.remove();
Â  Â  }
Â  };

Â  // Listen for the print events
Â  window.onbeforeprint = addPhoneNumberForPrint;
Â  window.onafterprint = removePhoneNumberAfterPrint;

/* === END OF NEW CODE FOR PHONE NUMBER IN PRINT === */

(function () {
  const phoneNumber = '+91 86887 36108'; // keep private in JS

  const makePhoneLink = () => {
    const a = document.createElement('a');
    a.href = 'tel:' + phoneNumber.replace(/\D/g, '');
    a.className = 'phone-link print-only';
    a.innerHTML = '<i class="bx bx-phone"></i> ' + phoneNumber;
    return a;
  };

  const addPhoneToPrintHeader = () => {
    const printHeader = document.querySelector('.print-header .social-links');
    if (!printHeader) return;
    // avoid duplicates
    if (!printHeader.querySelector('.phone-link')) {
      printHeader.appendChild(makePhoneLink());
    }
  };

  const removeInjectedPhone = () => {
    document.querySelectorAll('.phone-link').forEach(el => el.remove());
  };

  // Use event listeners so you don't overwrite other handlers
  const before = () => { addPhoneToPrintHeader(); };
  const after  = () => { removeInjectedPhone(); };

  window.addEventListener('beforeprint', before);
  window.addEventListener('afterprint', after);

  // Fallback for Chrome/Safari print preview toggles
  const mql = window.matchMedia('print');
  if (mql.addEventListener) {
    mql.addEventListener('change', e => (e.matches ? before() : after()));
  } else if (mql.addListener) {
    mql.addListener(e => (e.matches ? before() : after()));
  }
})();


})()
